@model IEnumerable<OrganizationViewModel>
<div class="text-center">
	<form class="d-flex" asp-action="Synchronize" asp-asp-controller="Organization">
		<input class="form-control me-2" type="search" placeholder="Поиск" aria-label="Search" id="search">
		<button class="btn btn-outline-success" type="submit">Синхронизация данных</button>
	</form>
	<table class="table">
		<thead>
			<tr>
				<th scope="col">Наименование</th>
				<th scope="col">Статус</th>
				<th scope="col">Подразделение</th>
			</tr>
		</thead>
		<tbody>
		@foreach(var item in Model)
		{
			<tr class="rowElem">
				<td class="name">@item.Name</td>
				<td>@item.Status</td>
				<td style="display:none">
					<div class="spinner-border" role="status">
						<span class="visually-hidden">Loading...</span>
					</div>
				</td>
				<td>@item.ParentId</td>
			</tr>
		}
		</tbody>
	</table>
	<a class="btn btn-outline-success" type="submit" href="@Url.Action("Add","Organization")">Добавить поле</a>
</div>

<script>
	const search = document.getElementById("search");
	let tbodyElemsSearch = document.querySelectorAll(".name");

	const rows = document.querySelectorAll('.rowElem');

	search.oninput = function () {
		let value = search.value.trim();

		if (value != '') {
			tbodyElemsSearch.forEach(function (elem) {
				if (elem.innerText.toLowerCase().search(value.toLowerCase()) == -1) {
					elem.parentNode.style.display = 'none';
				}
				else {
					elem.parentNode.style.display = '';
				}
			});
		}
		else {
			tbodyElemsSearch.forEach(function (elem) {
				elem.parentNode.style.display = '';
			});
		};
	};

	function switchIconsToUpdating(){
		rows.forEach(function (row) {
			let cell = row.querySelector('td:nth-child(2)');
			cell.style.display = 'none';
		});
		rows.forEach(function (row) {
			let cell = row.querySelector('td:nth-child(3)');
			cell.style.display = '';
		});
	};

	function switchIconsReady() {
		rows.forEach(function (row) {
			let cell = row.querySelector('td:nth-child(2)');
			cell.style.display = '';
		});
		rows.forEach(function (row) {
			let cell = row.querySelector('td:nth-child(3)');
			cell.style.display = 'none';
		});
	};

	function updateStatuses(updatedStatuses) {
		switchIconsReady();
		rows.forEach(row => {
			const nameCell = row.querySelector('td:first-child');
			const name = nameCell.textContent;

			if (updatedStatuses.hasOwnProperty(name)) {
				const statusCell = row.querySelector('td:nth-child(2)');
				statusCell.textContent = updatedStatuses[name];
			}
		});
	};

	function getUpdatedStatuses() {
		return new Promise((resolve, reject) => {
			const xhr = new XMLHttpRequest();
			xhr.open('GET', 'http://localhost:5135/StatusUpdate');
			xhr.onload = function () {
				if (xhr.status >= 200 && xhr.status < 300) {
					resolve(JSON.parse(xhr.response));
				} 
				else {
					reject(xhr.statusText);
				}
			};
			xhr.onerror = function () {
				reject(xhr.statusText);
			};
			xhr.send();
		});
	};

	async function startUpdateLoop() {
		setInterval(async () => {
			try {
				switchIconsToUpdating();
				const updatedStatuses = await getUpdatedStatuses();
				updateStatuses(updatedStatuses);
			} 
			catch (error) {
				console.error('Ошибка получения обновлений:', error);
			}
		}, 3000);
	};

	startUpdateLoop();
</script>

